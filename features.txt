any.to_string() -> str
getter any.size -> num

number.fix(digits: num) -> str    // 100.fix(2) => '100.00'

string.reverse() -> str
string.to_upper(section?: range) -> str
string.to_lower(section?: range) -> str
string.to_title() -> str
string.replace(searcher: (regexp | str | function), replacer: (str | function)) -> str
string.at(index: num, default?)
string.match(rex: regexp) -> str[]
string.starts_with(value: str) -> bool
string.ends_with(value: str) -> bool
string.index_of(part: str) -> num
string.pad(size: num, fill: str)
string.padStart(size: num, fill := ' ')
string.padEnd(size: num, fill := ' ')
string.trim()
string.trim_start()
string.trim_end()
string.code_at(index: num) -> num
string.reverse() -> str
string.pick(range?: range) -> str
string.split(splitter: (regexp | str) = /\s+/)

regexp.matches(text: str) -> bool
regexp.flags: str
regexp.body: str

object.get(name: str, default?)
object.set(name: str, value) -> void
object.has(name: str) -> bool
getter object.keys -> str[]
getter object.values -> Any[]

array.at(index: num, default?)
array.set(index: num, value) -> void
array.section((start, end, step = 1)?: num) -> arr
array.append(value)
array.preppend(value)
array.remove(index)
array.insert(index, value)
array.filter(cb: (element, index, array) -> bool)
array.reduce(cb: (prev, curr, index, array) -> void, default)
array.index_of(value) -> num
array.flat(depth: num)
array.join(joiner: str = ', ') -> str
array.reverse()
array.sort(cb?)
array.pick(range?: range)

function.name: str


error.name: str = this.__ctor.name    // TypeError { name: 'TypeError' }
error.description?: str
error.stack?: str

class Error:
	getter name:
		return this.__ctor.name
	const description: str? = null
	__ctor(description):
		this += { description }
	to_string!:
		if description:
			return '$name: $description'
		else:
			return name




if (): ()
or (): ()    // else if
else: ()
unless (): ()    // if not

switch () as (): // switch is an expression
	(): ()
	is (), (): ()
	else: ()

loop:
	break
	skip
while (): ()
until (): ()
for () in (): ()
for () of (): ()

try: ()
catch (): ()

... then (): ()

import () as () from ()

from () import: ()

(): () = ()
const (): () = ()

fun ()(()) -> ():
	return ()

(()) -> () =>    // (params) -> returns => expression

class () extends ():
	$private_prop
	public ()
	static ()
	()(()) {}    // __ctor(): ()    ->    public fun __ctor(): ()

type ():<(), ()> = ()

() and ()
() or ()
not ()
() in ()
throw ()
del ()

print(values, sep, end)
typeof(value) -> str
isempty(value) -> bool
exit(code)
eval(string)
isinstance(value, ctor)
parentof(some_class)

{
	name = value    // normal assignments
	object    // object = object
	function(): ()
	...another_obj
}

#{
	// dict: all properties will be constants
}

[
	value
	...another_arr
]

#[
	// tuple
]

() |> (it)